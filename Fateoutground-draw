#include "Auto.h"
#include "Windows.h"
#include <iostream>
#include <string>
#include <Tlhelp32.h>
#include <stdio.h>
#include <tchar.h>
#include <cstdio>
#include <locale>
static ID3D11Device* g_pd3dDevice = nullptr;
static ID3D11DeviceContext* g_pd3dDeviceContext = nullptr;
static IDXGISwapChain* g_pSwapChain = nullptr;
static bool                     g_SwapChainOccluded = false;
static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;
static ID3D11RenderTargetView* g_mainRenderTargetView = nullptr;

bool CreateDeviceD3D(HWND hWnd);
void CleanupDeviceD3D();
void CreateRenderTarget();
void CleanupRenderTarget();


//######################变量定义
RECT 窗口矩形; //窗口的左上xy，右下xy
using namespace std;
HANDLE 游戏句柄;
DWORD pid;
HWND 游戏窗口句柄;
HANDLE 模块基址;
DWORD64 GName;
DWORD64 Gword;
DWORD64 矩阵基址;

struct Vector
{
    float x;
    float y;
    float z;
};
struct Vector3
{
    float x;
    float y;
    float z;
    float w;
};
Vector 对象坐标;
Vector3 方框;
float 矩阵数组[4][4];
POINT 坐标;
DWORD64 缓冲区, 缓冲区1, 缓冲区2, 缓冲区3;
float d3d矩阵z, d3d矩阵x, d3d矩阵y, d3d矩阵y2, 缩放比例;
int hp, team, myteam, myhp;


bool Read(uintptr_t addr, void* buf, int size)
{
    ReadProcessMemory(游戏句柄, (LPCVOID)addr, buf, size, NULL);
    return 1;
}


//模版
template<typename T>
T Read(uintptr_t addr)
{
    T buf;
    Read(addr, &buf, sizeof(T));
    return buf;
}

struct FnameEntry
{
    uint16_t biwide : 1;
    uint16_t xxxx : 5;
    uint16_t len : 10;
};

std::string GetName(unsigned int a1)
{

    _int64 v1; // rbx
    int v4; // [rsp+3Ch] [rbp+14h]
    v1 = HIWORD(a1); //v1 = a1 >>16;
    v4 = (unsigned __int16)a1; //v4 = a1 & 0xffff 
    uint64_t  yy = Read<uint64_t >(GName + (v1 + 2) * 8) + (2 * v4);  //字符串地址
    FnameEntry  fnameEntry = Read<FnameEntry >(yy);    //字符串长度
    char buf[1024];
    memset(buf, 0, 1024);  //终止符？
    Read(yy + 2, buf, fnameEntry.len);  //字符串
    std::string Name;
    if (fnameEntry.biwide)   //宽窄字符转换？
    {
        try
        {
            std::wstring_convert<  std::codecvt<wchar_t, char, mbstate_t>> converter(new std::codecvt<wchar_t, char, mbstate_t>("CHS"));   //转窄字符
        }
        catch (...)
        {
            Name = buf;
        }
    }
    else
    {
        Name = buf;
    }

    size_t Pos = Name.rfind('/');    //跳过/
    if (Pos != std::string::npos)
    {
        Name = Name.substr(Pos + 1);
    }
    return Name;
}

//函数1
DWORD GetProcessiD(const wchar_t* processName) {
    //通过创建进程快照 遍历进程快照来获取进程ID
    HANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hProcess == INVALID_HANDLE_VALUE) {
        return  FALSE;
    };
    PROCESSENTRY32 pe = { sizeof(PROCESSENTRY32) };
    BOOL  bRet = Process32First(hProcess, &pe);
    while (bRet)
    {
        if (!_tcscmp(pe.szExeFile, processName)) {
            return pe.th32ProcessID;
        }
        bRet = Process32Next(hProcess, &pe);
    }
    return FALSE;
}

//函数2
HANDLE GetProcessModuleHandle(DWORD pid, CONST TCHAR* moduleName) {
    MODULEENTRY32 moduleEntry;  //定义了一个进程容器 用来接收进程消息
    HANDLE handle = NULL;
    handle = ::CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, pid);  //所有进程的句柄
    if (!handle) {
        CloseHandle(handle); //释放进程快照防止内存泄露
        return NULL;
    }
    ZeroMemory(&moduleEntry, sizeof(MODULEENTRY32));
    moduleEntry.dwSize = sizeof(MODULEENTRY32);
    if (!Module32First(handle, &moduleEntry)) {
        CloseHandle(handle);
        return NULL;
    }
    do {
        if (_tcscmp(moduleEntry.szModule, moduleName) == 0) { return moduleEntry.hModule; }
    } while (Module32Next(handle, &moduleEntry)); //一个迭代函数
    CloseHandle(handle);
    return 0;
}


bool 初始化()
{
    游戏窗口句柄 = FindWindowA(LPCSTR("UnrealWindow"), LPCSTR("Fadeout: Underground  "));
    std::cout << "窗口句柄：" << 游戏窗口句柄 << std::endl;
    GetWindowThreadProcessId(游戏窗口句柄, &pid);
    std::cout << "pid:" << pid << std::endl;
    游戏句柄 = OpenProcess(PROCESS_ALL_ACCESS, 0, pid);
    std::cout << "游戏进程句柄：" << 游戏句柄 << std::endl;
    模块基址 = GetProcessModuleHandle(pid, L"Grapple-Win64-Shipping.exe");
    std::cout << "模块地址：" << 模块基址 << std::endl;
    GName = (DWORD64)模块基址 + 0x36D52C0 ;
    Gword = (DWORD64)模块基址 + 0x37D48B8;
    矩阵基址 = (DWORD64)模块基址 + 0x33A3590;
    std::cout << "GName：" << std::hex << GName << std::endl;
    std::cout << "Gword：" << std::hex << Gword << std::endl;
    std::cout << "矩阵基址：" << std::hex << 矩阵基址 << std::endl;
    return 1;
   
}

bool CreateDeviceD3D(HWND hWnd)
{
    // Setup swap chain
    DXGI_SWAP_CHAIN_DESC sd;
    ZeroMemory(&sd, sizeof(sd));
    sd.BufferCount = 2;
    sd.BufferDesc.Width = 0;
    sd.BufferDesc.Height = 0;
    sd.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
    sd.BufferDesc.RefreshRate.Numerator = 60;
    sd.BufferDesc.RefreshRate.Denominator = 1;
    sd.Flags = DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH;
    sd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
    sd.OutputWindow = hWnd;
    sd.SampleDesc.Count = 1;
    sd.SampleDesc.Quality = 0;
    sd.Windowed = TRUE;
    sd.SwapEffect = DXGI_SWAP_EFFECT_DISCARD;

    UINT createDeviceFlags = 0;
    //createDeviceFlags |= D3D11_CREATE_DEVICE_DEBUG;
    D3D_FEATURE_LEVEL featureLevel;
    const D3D_FEATURE_LEVEL featureLevelArray[2] = { D3D_FEATURE_LEVEL_11_0, D3D_FEATURE_LEVEL_10_0, };
    HRESULT res = D3D11CreateDeviceAndSwapChain(nullptr, D3D_DRIVER_TYPE_HARDWARE, nullptr, createDeviceFlags, featureLevelArray, 2, D3D11_SDK_VERSION, &sd, &g_pSwapChain, &g_pd3dDevice, &featureLevel, &g_pd3dDeviceContext);
    if (res == DXGI_ERROR_UNSUPPORTED) // Try high-performance WARP software driver if hardware is not available.
        res = D3D11CreateDeviceAndSwapChain(nullptr, D3D_DRIVER_TYPE_WARP, nullptr, createDeviceFlags, featureLevelArray, 2, D3D11_SDK_VERSION, &sd, &g_pSwapChain, &g_pd3dDevice, &featureLevel, &g_pd3dDeviceContext);
    if (res != S_OK)
        return false;

    CreateRenderTarget();
    return true;
}
void CleanupDeviceD3D()
{
    CleanupRenderTarget();
    if (g_pSwapChain) { g_pSwapChain->Release(); g_pSwapChain = nullptr; }
    if (g_pd3dDeviceContext) { g_pd3dDeviceContext->Release(); g_pd3dDeviceContext = nullptr; }
    if (g_pd3dDevice) { g_pd3dDevice->Release(); g_pd3dDevice = nullptr; }
}
void CreateRenderTarget()
{
    ID3D11Texture2D* pBackBuffer;
    g_pSwapChain->GetBuffer(0, IID_PPV_ARGS(&pBackBuffer));
    g_pd3dDevice->CreateRenderTargetView(pBackBuffer, nullptr, &g_mainRenderTargetView);
    pBackBuffer->Release();
}
void CleanupRenderTarget()
{
    if (g_mainRenderTargetView) { g_mainRenderTargetView->Release(); g_mainRenderTargetView = nullptr; }
}
extern IMGUI_IMPL_API LRESULT ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    if (ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam))
        return true;

    switch (msg)
    {
    case WM_SIZE:
        if (wParam == SIZE_MINIMIZED)
            return 0;
        g_ResizeWidth = (UINT)LOWORD(lParam); // Queue resize
        g_ResizeHeight = (UINT)HIWORD(lParam);
        return 0;
    case WM_SYSCOMMAND:
        if ((wParam & 0xfff0) == SC_KEYMENU) // Disable ALT application menu
            return 0;
        break;
    case WM_DESTROY:
        ::PostQuitMessage(0);
        return 0;
    }
    return ::DefWindowProcW(hWnd, msg, wParam, lParam);
}





bool 坐标转屏幕(Vector 对象坐标, Vector3* 方框)
{
    d3d矩阵z = 矩阵数组[0][3] * 对象坐标.x + 矩阵数组[1][3] * 对象坐标.y + 矩阵数组[2][3] * 对象坐标.z + 矩阵数组[3][3];
    if (d3d矩阵z < 0.01)
    {
        return false;
    }
    缩放比例 = 1 / d3d矩阵z;
    d3d矩阵x = 窗口矩形.right / 2 + (矩阵数组[0][0] * 对象坐标.x + 矩阵数组[1][0] * 对象坐标.y + 矩阵数组[2][0] * 对象坐标.z + 矩阵数组[3][0]) * 缩放比例 * 窗口矩形.right / 2;
    d3d矩阵y = 窗口矩形.bottom / 2 - (矩阵数组[0][1] * 对象坐标.x + 矩阵数组[1][1] * 对象坐标.y + 矩阵数组[2][1] * 对象坐标.z + 20 + 矩阵数组[3][1]) * 缩放比例 * 窗口矩形.bottom / 2;
    d3d矩阵y2 = 窗口矩形.bottom / 2 - (矩阵数组[0][1] * 对象坐标.x + 矩阵数组[1][1] * 对象坐标.y + 矩阵数组[2][1] * (对象坐标.z + 260) + 矩阵数组[3][1]) * 缩放比例 * 窗口矩形.bottom / 2;
    方框->x = d3d矩阵x - (d3d矩阵y2 - d3d矩阵y) / 4;
    方框->y = d3d矩阵y - (d3d矩阵y2 - d3d矩阵y) / 2;
    方框->z = d3d矩阵y2 - d3d矩阵y;
    方框->w = (d3d矩阵y2 - d3d矩阵y) / 2;
    //printf("x:%f y:%f z:%f \n", 方框.x, 方框.y, 方框.z);
    return 1;
}





bool 遍历函数()
{
    uint64_t  Uword = Read<uint64_t >(Gword);
    uint64_t  Ulevel = Read<uint64_t >(Uword + 0x30);
    int 数量 = Read<uint64_t >(Ulevel + 0xa0);
    uint64_t  世界数组 = Read<uint64_t >(Ulevel + 0x98);//就是很多人物地址
    uint64_t  矩阵 = Read<uint64_t >(Read<uint64_t >(矩阵基址) + 0x20) + 0x270; //矩阵地址
    Read(矩阵, &矩阵数组, 64);
    //std::cout << 矩阵数组[0][0] << std::endl;
    for (int i = 0; i < 数量; i++)
    {

        uint64_t  对象地址 = Read<uint64_t >(世界数组 + i * 8);
        uint64_t  根组件 = Read<uint64_t >(对象地址 + 0x130);   //808 xue 
        Read(根组件 + 0x11c, &对象坐标, 12);
        if (对象坐标.x == 0 || 对象坐标.y == 0 || 对象坐标.z == 0)continue;
        坐标转屏幕(对象坐标, &方框);
        //printf("x:%f y:%f z:%f \n", 方框.x, 方框.y, 方框.z);
        string 类名 = GetName(Read<uint64_t >(对象地址 + 0x18));
      /*  ImGui::GetForegroundDrawList()->AddText(ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImColor(255, 255, 0, 255), 类名.c_str());
        ImGui::GetForegroundDrawList()->AddText(ImVec2(方框.x + 方框.w, 方框.y + 方框.z - 20), ImColor(255, 255, 0, 255), to_string(对象地址).c_str());*/
        if (类名 == "BP_Char_Wolf_C" || 类名 == "BP_Char_Opossum_C" || 类名 == "BP_Char_Snek_C" || 类名 == "BP_Char_Panda_C" || 类名 == "BP_Char_Bingo_C" || 类名 == "BP_Char_Bunn_C" || 类名 == "BP_Char_Mouse_C" || 类名 == "BP_Char_Raccoon_C" || 类名 == "BP_Char_Gwen_C")
        {
                uint64_t  GameInstance = Read<uint64_t >(Uword + 0X170); //当前示例就是本人
                uint64_t  LocalPlayers = Read<uint64_t >(GameInstance + 0X38);
                uint64_t  Player = Read<uint64_t >(LocalPlayers);
                uint64_t  PlayerController = Read<uint64_t >(Player + 0X30);
                uint64_t  Pawn = Read<uint64_t >(PlayerController + 0X298);//等价对象地址
                uint64_t  PlayerState = Read<uint64_t >(Pawn + 0X238); 
                int PawnTeamID = Read<int >(PlayerState + 0X458);  //本人队伍
                int TeamID = Read<int>(Read<uint64_t >(对象地址 + 0X238) + 0x458);
                float  hp = Read<float >(对象地址 + 0x808);   //808 xue 
               // printf("%d  \n", TeamID);
                if (TeamID != PawnTeamID && hp > 0)
                {
                    if (类名 == "BP_Char_Wolf_C")
                    {
                        float XHP = hp / 170.f * 方框.z;
                        ImGui::GetForegroundDrawList()->AddRect(ImVec2(方框.x + 1, 方框.y), ImVec2(方框.x + 5, 方框.y + 方框.z), ImColor(0, 0, 0));
                        ImGui::GetForegroundDrawList()->AddRectFilled(ImVec2(方框.x + 1, 方框.y), ImVec2(方框.x + 5, 方框.y + XHP), ImColor(0, 255, 0));
                        ImGui::GetForegroundDrawList()->AddText(ImVec2(方框.x + 方框.w, 方框.y + 方框.z - 20), ImColor(255, 255, 0, 255), to_string(hp).c_str());
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x, 方框.y), ImVec2(方框.x + 方框.w, 方框.y), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x + 方框.w, 方框.y), ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImVec2(方框.x, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x, 方框.y + 方框.z), ImVec2(方框.x, 方框.y), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(窗口矩形.right / 2, 0), ImVec2(方框.x + 方框.w / 2, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                    }
                    if( 类名 == "BP_Char_Snek_C" )
                    {
                        float XHP = hp / 130.f * 方框.z;
                        ImGui::GetForegroundDrawList()->AddRect(ImVec2(方框.x + 1, 方框.y), ImVec2(方框.x + 5, 方框.y + 方框.z), ImColor(0, 0, 0));
                        ImGui::GetForegroundDrawList()->AddRectFilled(ImVec2(方框.x + 1, 方框.y), ImVec2(方框.x + 5, 方框.y + XHP), ImColor(0, 255, 0));
                        ImGui::GetForegroundDrawList()->AddText(ImVec2(方框.x + 方框.w, 方框.y + 方框.z - 20), ImColor(255, 255, 0, 255), to_string(hp).c_str());
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x, 方框.y), ImVec2(方框.x + 方框.w, 方框.y), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x + 方框.w, 方框.y), ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImVec2(方框.x, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x, 方框.y + 方框.z), ImVec2(方框.x, 方框.y), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(窗口矩形.right / 2, 0), ImVec2(方框.x + 方框.w / 2, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                    }
                    if ( 类名 == "BP_Char_Panda_C")
                    {
                        float XHP = hp / 160.f * 方框.z;
                        ImGui::GetForegroundDrawList()->AddRect(ImVec2(方框.x + 1, 方框.y), ImVec2(方框.x + 5, 方框.y + 方框.z), ImColor(0, 0, 0));
                        ImGui::GetForegroundDrawList()->AddRectFilled(ImVec2(方框.x + 1, 方框.y), ImVec2(方框.x + 5, 方框.y + XHP), ImColor(0, 255, 0));
                        ImGui::GetForegroundDrawList()->AddText(ImVec2(方框.x + 方框.w, 方框.y + 方框.z - 20), ImColor(255, 255, 0, 255), to_string(hp).c_str());
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x, 方框.y), ImVec2(方框.x + 方框.w, 方框.y), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x + 方框.w, 方框.y), ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImVec2(方框.x, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x, 方框.y + 方框.z), ImVec2(方框.x, 方框.y), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(窗口矩形.right / 2, 0), ImVec2(方框.x + 方框.w / 2, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                    }
                    if (类名 == "BP_Char_Bunn_C")
                    {
                        float XHP = hp / 90.f * 方框.z;
                        ImGui::GetForegroundDrawList()->AddRect(ImVec2(方框.x + 1, 方框.y), ImVec2(方框.x + 5, 方框.y + 方框.z), ImColor(0, 0, 0));
                        ImGui::GetForegroundDrawList()->AddRectFilled(ImVec2(方框.x + 1, 方框.y), ImVec2(方框.x + 5, 方框.y + XHP), ImColor(0, 255, 0));
                        ImGui::GetForegroundDrawList()->AddText(ImVec2(方框.x + 方框.w, 方框.y + 方框.z - 20), ImColor(255, 255, 0, 255), to_string(hp).c_str());
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x, 方框.y), ImVec2(方框.x + 方框.w, 方框.y), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x + 方框.w, 方框.y), ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImVec2(方框.x, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x, 方框.y + 方框.z), ImVec2(方框.x, 方框.y), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(窗口矩形.right / 2, 0), ImVec2(方框.x + 方框.w / 2, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                    }
                    if (类名 == "BP_Char_Opossum_C"  || 类名 == "BP_Char_Bingo_C"  || 类名 == "BP_Char_Mouse_C" || 类名 == "BP_Char_Raccoon_C" || 类名 == "BP_Char_Gwen_C")
                    {
                        float XHP = hp / 100.f * 方框.z;
                        ImGui::GetForegroundDrawList()->AddRect(ImVec2(方框.x + 1, 方框.y), ImVec2(方框.x + 5, 方框.y + 方框.z), ImColor(0, 0, 0));
                        ImGui::GetForegroundDrawList()->AddRectFilled(ImVec2(方框.x + 1, 方框.y), ImVec2(方框.x + 5, 方框.y + XHP), ImColor(0, 255, 0));
                        ImGui::GetForegroundDrawList()->AddText(ImVec2(方框.x + 方框.w, 方框.y + 方框.z - 20), ImColor(255, 255, 0, 255), to_string(hp).c_str());
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x, 方框.y), ImVec2(方框.x + 方框.w, 方框.y), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x + 方框.w, 方框.y), ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x + 方框.w, 方框.y + 方框.z), ImVec2(方框.x, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(方框.x, 方框.y + 方框.z), ImVec2(方框.x, 方框.y), ImColor(0, 245, 255, 255));
                        ImGui::GetForegroundDrawList()->AddLine(ImVec2(窗口矩形.right / 2, 0), ImVec2(方框.x + 方框.w / 2, 方框.y + 方框.z), ImColor(0, 245, 255, 255));
                    }

                
                }
            
        }
        //}
    }
    return 0;
}




int main()
{
    初始化();






    int Width, Hight;

    Width = GetSystemMetrics(SM_CXSCREEN);//获取当前分辨率宽度
    Hight = GetSystemMetrics(SM_CYSCREEN);//获取当前分辨率高度

    
    WNDCLASSEXW wc = { sizeof(wc), CS_CLASSDC, WndProc, 0L, 0L, GetModuleHandle(nullptr), nullptr, nullptr, nullptr, nullptr, L"ImGui Example", nullptr };
    ::RegisterClassExW(&wc);
    HWND hwnd = ::CreateWindowEx(WS_EX_TOPMOST | WS_EX_LAYERED | WS_EX_TRANSPARENT, wc.lpszClassName, NULL, WS_POPUP, 0, 0, Width, Hight, nullptr, nullptr, wc.hInstance, nullptr);
    // | WS_EX_LAYERED  | WS_EX_TRANSPARENT WS_EX_TOPMOST |WS_EX_LAYERED ,
    // Initialize Direct3D
    if (!CreateDeviceD3D(hwnd))
    {
        CleanupDeviceD3D();
        ::UnregisterClassW(wc.lpszClassName, wc.hInstance);
        return 1;
    }

    // Show the window
    ::ShowWindow(hwnd, SW_SHOWDEFAULT);
    ::UpdateWindow(hwnd);

    // Setup Dear ImGui context
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO(); (void)io;
    io.Fonts->AddFontFromFileTTF("ziti22.otf", 15.0f, NULL, io.Fonts->GetGlyphRangesChineseSimplifiedCommon());

    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls

    // Setup Dear ImGui style
    ImGui::StyleColorsDark();
    //ImGui::StyleColorsLight();

    // Setup Platform/Renderer backends
    ImGui_ImplWin32_Init(hwnd);
    ImGui_ImplDX11_Init(g_pd3dDevice, g_pd3dDeviceContext);




    // Our state
    bool show_demo_window = true;
    bool show_another_window = false;
    ImVec4 clear_color = ImVec4(ImColor(255, 255, 255)); //背景颜色
    SetLayeredWindowAttributes(hwnd, ImColor(255, 255, 255), 0, LWA_COLORKEY);

    // Main loop
    bool done = false;



    while (!done)
    {
        // Poll and handle messages (inputs, window resize, etc.)
        // See the WndProc() function below for our to dispatch events to the Win32 backend.
        MSG msg;
        while (::PeekMessage(&msg, nullptr, 0U, 0U, PM_REMOVE))
        {
            ::TranslateMessage(&msg);
            ::DispatchMessage(&msg);
            if (msg.message == WM_QUIT)
                done = true;
        }
        if (done)
            break;

        // Handle window being minimized or screen locked
        if (g_SwapChainOccluded && g_pSwapChain->Present(0, DXGI_PRESENT_TEST) == DXGI_STATUS_OCCLUDED)
        {
            ::Sleep(10);
            continue;
        }
        g_SwapChainOccluded = false;

        // Handle window resize (we don't resize directly in the WM_SIZE handler)
        if (g_ResizeWidth != 0 && g_ResizeHeight != 0)
        {
            CleanupRenderTarget();
            g_pSwapChain->ResizeBuffers(0, g_ResizeWidth, g_ResizeHeight, DXGI_FORMAT_UNKNOWN, 0);
            g_ResizeWidth = g_ResizeHeight = 0;
            CreateRenderTarget();
        }
        // Start the Dear ImGui frame
        ImGui_ImplDX11_NewFrame();
        ImGui_ImplWin32_NewFrame();
        ImGui::NewFrame(); //开始帧

        //获取当前帧率
        float frameRate = ImGui::GetIO().Framerate;
        char frameRateStr[32];
        std::snprintf(frameRateStr, sizeof(frameRateStr), "FPS: %d", static_cast<int>(frameRate));
        ImGui::GetForegroundDrawList()->AddText(ImVec2(10, 100), ImColor(0, 255, 0, 255), frameRateStr);
        ImGui::GetForegroundDrawList()->AddText(ImVec2(10, 120), ImColor(0, 255, 0, 255), u8"绘制开启");

        // 绘制代码区
        GetClientRect(游戏窗口句柄, &窗口矩形);
        坐标.x = 窗口矩形.left;
        坐标.y = 窗口矩形.top;
        // std::cout << 窗口矩形.right << std::endl;
        ClientToScreen(游戏窗口句柄, &坐标);

        MoveWindow(hwnd, 坐标.x, 坐标.y, 窗口矩形.right, 窗口矩形.bottom, true);
        static bool windows_open = true;



        if (windows_open)
        {


            遍历函数();


        }

        // Rendering
        ImGui::Render();

        const float clear_color_with_alpha[4] = { clear_color.x * clear_color.w, clear_color.y * clear_color.w, clear_color.z * clear_color.w, clear_color.w };
        g_pd3dDeviceContext->OMSetRenderTargets(1, &g_mainRenderTargetView, nullptr);
        g_pd3dDeviceContext->ClearRenderTargetView(g_mainRenderTargetView, clear_color_with_alpha);
        ImGui_ImplDX11_RenderDrawData(ImGui::GetDrawData());

        // Present
        HRESULT hr = g_pSwapChain->Present(1, 0);   // Present with vsync
        //HRESULT hr = g_pSwapChain->Present(0, 0); // Present without vsync
        g_SwapChainOccluded = (hr == DXGI_STATUS_OCCLUDED);
    }

    // Cleanup
    ImGui_ImplDX11_Shutdown();
    ImGui_ImplWin32_Shutdown();
    ImGui::DestroyContext();

    CleanupDeviceD3D();
    ::DestroyWindow(hwnd);
    ::UnregisterClassW(wc.lpszClassName, wc.hInstance);


}
